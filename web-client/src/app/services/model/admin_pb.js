/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.exportSymbol('proto.life.kylestauffer.snews.GetDraftPostsRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetDraftPostsResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetPostStatsRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetPostStatsResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetTagsRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetTagsResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.SavePostRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.SavePostResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.UploadImageRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.UploadImageResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetTagsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetTagsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetTagsRequest.displayName = 'proto.life.kylestauffer.snews.GetTagsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetTagsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetTagsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetTagsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetTagsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetTagsRequest}
 */
proto.life.kylestauffer.snews.GetTagsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetTagsRequest;
  return proto.life.kylestauffer.snews.GetTagsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetTagsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetTagsRequest}
 */
proto.life.kylestauffer.snews.GetTagsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetTagsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetTagsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetTagsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetTagsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetTagsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.life.kylestauffer.snews.GetTagsResponse.repeatedFields_, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetTagsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetTagsResponse.displayName = 'proto.life.kylestauffer.snews.GetTagsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.life.kylestauffer.snews.GetTagsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetTagsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetTagsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetTagsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetTagsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    base_pb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetTagsResponse}
 */
proto.life.kylestauffer.snews.GetTagsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetTagsResponse;
  return proto.life.kylestauffer.snews.GetTagsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetTagsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetTagsResponse}
 */
proto.life.kylestauffer.snews.GetTagsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Tag;
      reader.readMessage(value,base_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetTagsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetTagsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetTagsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetTagsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      base_pb.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Tag tags = 1;
 * @return {!Array<!proto.life.kylestauffer.snews.Tag>}
 */
proto.life.kylestauffer.snews.GetTagsResponse.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.life.kylestauffer.snews.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.Tag, 1));
};


/** @param {!Array<!proto.life.kylestauffer.snews.Tag>} value */
proto.life.kylestauffer.snews.GetTagsResponse.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.life.kylestauffer.snews.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.life.kylestauffer.snews.Tag}
 */
proto.life.kylestauffer.snews.GetTagsResponse.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.life.kylestauffer.snews.Tag, opt_index);
};


proto.life.kylestauffer.snews.GetTagsResponse.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.SavePostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.SavePostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.SavePostRequest.displayName = 'proto.life.kylestauffer.snews.SavePostRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.SavePostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.SavePostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.SavePostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SavePostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    post: (f = msg.getPost()) && base_pb.SimplePost.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.SavePostRequest}
 */
proto.life.kylestauffer.snews.SavePostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.SavePostRequest;
  return proto.life.kylestauffer.snews.SavePostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.SavePostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.SavePostRequest}
 */
proto.life.kylestauffer.snews.SavePostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.SimplePost;
      reader.readMessage(value,base_pb.SimplePost.deserializeBinaryFromReader);
      msg.setPost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.SavePostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.SavePostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.SavePostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SavePostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.SimplePost.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimplePost post = 1;
 * @return {?proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.SavePostRequest.prototype.getPost = function() {
  return /** @type{?proto.life.kylestauffer.snews.SimplePost} */ (
    jspb.Message.getWrapperField(this, base_pb.SimplePost, 1));
};


/** @param {?proto.life.kylestauffer.snews.SimplePost|undefined} value */
proto.life.kylestauffer.snews.SavePostRequest.prototype.setPost = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.life.kylestauffer.snews.SavePostRequest.prototype.clearPost = function() {
  this.setPost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.SavePostRequest.prototype.hasPost = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.SavePostResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.SavePostResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.SavePostResponse.displayName = 'proto.life.kylestauffer.snews.SavePostResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.SavePostResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.SavePostResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.SavePostResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SavePostResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    post: (f = msg.getPost()) && base_pb.SimplePost.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.SavePostResponse}
 */
proto.life.kylestauffer.snews.SavePostResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.SavePostResponse;
  return proto.life.kylestauffer.snews.SavePostResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.SavePostResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.SavePostResponse}
 */
proto.life.kylestauffer.snews.SavePostResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.SimplePost;
      reader.readMessage(value,base_pb.SimplePost.deserializeBinaryFromReader);
      msg.setPost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.SavePostResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.SavePostResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.SavePostResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SavePostResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.SimplePost.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimplePost post = 1;
 * @return {?proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.SavePostResponse.prototype.getPost = function() {
  return /** @type{?proto.life.kylestauffer.snews.SimplePost} */ (
    jspb.Message.getWrapperField(this, base_pb.SimplePost, 1));
};


/** @param {?proto.life.kylestauffer.snews.SimplePost|undefined} value */
proto.life.kylestauffer.snews.SavePostResponse.prototype.setPost = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.life.kylestauffer.snews.SavePostResponse.prototype.clearPost = function() {
  this.setPost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.SavePostResponse.prototype.hasPost = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetDraftPostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetDraftPostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetDraftPostsRequest.displayName = 'proto.life.kylestauffer.snews.GetDraftPostsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetDraftPostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetDraftPostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetDraftPostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetDraftPostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetDraftPostsRequest}
 */
proto.life.kylestauffer.snews.GetDraftPostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetDraftPostsRequest;
  return proto.life.kylestauffer.snews.GetDraftPostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetDraftPostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetDraftPostsRequest}
 */
proto.life.kylestauffer.snews.GetDraftPostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetDraftPostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetDraftPostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetDraftPostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetDraftPostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.life.kylestauffer.snews.GetDraftPostsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.life.kylestauffer.snews.GetDraftPostsRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.life.kylestauffer.snews.GetDraftPostsResponse.repeatedFields_, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetDraftPostsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetDraftPostsResponse.displayName = 'proto.life.kylestauffer.snews.GetDraftPostsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetDraftPostsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetDraftPostsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    postsList: jspb.Message.toObjectList(msg.getPostsList(),
    base_pb.SimplePost.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetDraftPostsResponse}
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetDraftPostsResponse;
  return proto.life.kylestauffer.snews.GetDraftPostsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetDraftPostsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetDraftPostsResponse}
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.SimplePost;
      reader.readMessage(value,base_pb.SimplePost.deserializeBinaryFromReader);
      msg.addPosts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetDraftPostsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetDraftPostsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      base_pb.SimplePost.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimplePost posts = 1;
 * @return {!Array<!proto.life.kylestauffer.snews.SimplePost>}
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.prototype.getPostsList = function() {
  return /** @type{!Array<!proto.life.kylestauffer.snews.SimplePost>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.SimplePost, 1));
};


/** @param {!Array<!proto.life.kylestauffer.snews.SimplePost>} value */
proto.life.kylestauffer.snews.GetDraftPostsResponse.prototype.setPostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.life.kylestauffer.snews.SimplePost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.GetDraftPostsResponse.prototype.addPosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.life.kylestauffer.snews.SimplePost, opt_index);
};


proto.life.kylestauffer.snews.GetDraftPostsResponse.prototype.clearPostsList = function() {
  this.setPostsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetPostStatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetPostStatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetPostStatsRequest.displayName = 'proto.life.kylestauffer.snews.GetPostStatsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetPostStatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetPostStatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetPostStatsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostStatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetPostStatsRequest}
 */
proto.life.kylestauffer.snews.GetPostStatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetPostStatsRequest;
  return proto.life.kylestauffer.snews.GetPostStatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetPostStatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetPostStatsRequest}
 */
proto.life.kylestauffer.snews.GetPostStatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetPostStatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetPostStatsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetPostStatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostStatsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetPostStatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetPostStatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetPostStatsResponse.displayName = 'proto.life.kylestauffer.snews.GetPostStatsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetPostStatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetPostStatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetPostStatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostStatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    averagewc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    averagetaglinewc: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetPostStatsResponse}
 */
proto.life.kylestauffer.snews.GetPostStatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetPostStatsResponse;
  return proto.life.kylestauffer.snews.GetPostStatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetPostStatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetPostStatsResponse}
 */
proto.life.kylestauffer.snews.GetPostStatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAveragewc(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAveragetaglinewc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetPostStatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetPostStatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetPostStatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostStatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAveragewc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAveragetaglinewc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string averageWC = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.GetPostStatsResponse.prototype.getAveragewc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.GetPostStatsResponse.prototype.setAveragewc = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string averageTaglineWC = 2;
 * @return {string}
 */
proto.life.kylestauffer.snews.GetPostStatsResponse.prototype.getAveragetaglinewc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.GetPostStatsResponse.prototype.setAveragetaglinewc = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.UploadImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.UploadImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.UploadImageRequest.displayName = 'proto.life.kylestauffer.snews.UploadImageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.UploadImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.UploadImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.UploadImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    filetype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    alttext: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.UploadImageRequest}
 */
proto.life.kylestauffer.snews.UploadImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.UploadImageRequest;
  return proto.life.kylestauffer.snews.UploadImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.UploadImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.UploadImageRequest}
 */
proto.life.kylestauffer.snews.UploadImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFiletype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlttext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.UploadImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.UploadImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.UploadImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFiletype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlttext();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string filetype = 2;
 * @return {string}
 */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.getFiletype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.setFiletype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string altText = 3;
 * @return {string}
 */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.getAlttext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.UploadImageRequest.prototype.setAlttext = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.UploadImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.UploadImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.UploadImageResponse.displayName = 'proto.life.kylestauffer.snews.UploadImageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.UploadImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.UploadImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.UploadImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.UploadImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: (f = msg.getImage()) && base_pb.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.UploadImageResponse}
 */
proto.life.kylestauffer.snews.UploadImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.UploadImageResponse;
  return proto.life.kylestauffer.snews.UploadImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.UploadImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.UploadImageResponse}
 */
proto.life.kylestauffer.snews.UploadImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Image;
      reader.readMessage(value,base_pb.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.UploadImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.UploadImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.UploadImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.UploadImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional Image image = 1;
 * @return {?proto.life.kylestauffer.snews.Image}
 */
proto.life.kylestauffer.snews.UploadImageResponse.prototype.getImage = function() {
  return /** @type{?proto.life.kylestauffer.snews.Image} */ (
    jspb.Message.getWrapperField(this, base_pb.Image, 1));
};


/** @param {?proto.life.kylestauffer.snews.Image|undefined} value */
proto.life.kylestauffer.snews.UploadImageResponse.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.life.kylestauffer.snews.UploadImageResponse.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.UploadImageResponse.prototype.hasImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.life.kylestauffer.snews);
