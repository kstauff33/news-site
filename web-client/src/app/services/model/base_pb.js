/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.life.kylestauffer.snews.Author', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetAuthorRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetAuthorResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetAuthorsRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetAuthorsResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetPostRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetPostResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetPostsRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetPostsResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetRecentPostsRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetRecentPostsResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetSubscriptionRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetTopPostsRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.GetTopPostsResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.Image', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.LoginRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.LoginResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.PostType', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.RegistrationRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.SimplePost', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.Subscription', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.SubscriptionRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.SubscriptionResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.Tag', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.TokenValidationRequest', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.TokenValidationResponse', null, global);
goog.exportSymbol('proto.life.kylestauffer.snews.UserRole', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.SimplePost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.life.kylestauffer.snews.SimplePost.repeatedFields_, null);
};
goog.inherits(proto.life.kylestauffer.snews.SimplePost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.SimplePost.displayName = 'proto.life.kylestauffer.snews.SimplePost';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.life.kylestauffer.snews.SimplePost.repeatedFields_ = [8,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.SimplePost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.SimplePost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SimplePost.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagline: jspb.Message.getFieldWithDefault(msg, 5, ""),
    author: (f = msg.getAuthor()) && proto.life.kylestauffer.snews.Author.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.life.kylestauffer.snews.Image.toObject(includeInstance, f),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.life.kylestauffer.snews.Tag.toObject, includeInstance),
    audiourl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    contexturlsList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.SimplePost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.SimplePost;
  return proto.life.kylestauffer.snews.SimplePost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.SimplePost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.SimplePost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTagline(value);
      break;
    case 6:
      var value = new proto.life.kylestauffer.snews.Author;
      reader.readMessage(value,proto.life.kylestauffer.snews.Author.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 7:
      var value = new proto.life.kylestauffer.snews.Image;
      reader.readMessage(value,proto.life.kylestauffer.snews.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 8:
      var value = new proto.life.kylestauffer.snews.Tag;
      reader.readMessage(value,proto.life.kylestauffer.snews.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAudiourl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addContexturls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.SimplePost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.SimplePost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SimplePost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagline();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuthor();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.life.kylestauffer.snews.Author.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.life.kylestauffer.snews.Image.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.life.kylestauffer.snews.Tag.serializeBinaryToWriter
    );
  }
  f = message.getAudiourl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getContexturlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp date = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setDate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.life.kylestauffer.snews.SimplePost.prototype.clearDate = function() {
  this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.hasDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string tagline = 5;
 * @return {string}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getTagline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setTagline = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Author author = 6;
 * @return {?proto.life.kylestauffer.snews.Author}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getAuthor = function() {
  return /** @type{?proto.life.kylestauffer.snews.Author} */ (
    jspb.Message.getWrapperField(this, proto.life.kylestauffer.snews.Author, 6));
};


/** @param {?proto.life.kylestauffer.snews.Author|undefined} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.life.kylestauffer.snews.SimplePost.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Image image = 7;
 * @return {?proto.life.kylestauffer.snews.Image}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getImage = function() {
  return /** @type{?proto.life.kylestauffer.snews.Image} */ (
    jspb.Message.getWrapperField(this, proto.life.kylestauffer.snews.Image, 7));
};


/** @param {?proto.life.kylestauffer.snews.Image|undefined} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.life.kylestauffer.snews.SimplePost.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.hasImage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated Tag tags = 8;
 * @return {!Array<!proto.life.kylestauffer.snews.Tag>}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.life.kylestauffer.snews.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.life.kylestauffer.snews.Tag, 8));
};


/** @param {!Array<!proto.life.kylestauffer.snews.Tag>} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.life.kylestauffer.snews.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.life.kylestauffer.snews.Tag}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.life.kylestauffer.snews.Tag, opt_index);
};


proto.life.kylestauffer.snews.SimplePost.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional string audioUrl = 9;
 * @return {string}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getAudiourl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setAudiourl = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string contextUrls = 10;
 * @return {!Array<string>}
 */
proto.life.kylestauffer.snews.SimplePost.prototype.getContexturlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<string>} value */
proto.life.kylestauffer.snews.SimplePost.prototype.setContexturlsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.life.kylestauffer.snews.SimplePost.prototype.addContexturls = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.life.kylestauffer.snews.SimplePost.prototype.clearContexturlsList = function() {
  this.setContexturlsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.Tag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.Tag.displayName = 'proto.life.kylestauffer.snews.Tag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.Tag.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.Tag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.Tag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.Tag.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tag: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.Tag}
 */
proto.life.kylestauffer.snews.Tag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.Tag;
  return proto.life.kylestauffer.snews.Tag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.Tag}
 */
proto.life.kylestauffer.snews.Tag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.Tag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.Tag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.Tag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.Tag.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Tag.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tag = 2;
 * @return {string}
 */
proto.life.kylestauffer.snews.Tag.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Tag.prototype.setTag = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.Image.displayName = 'proto.life.kylestauffer.snews.Image';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    smallurl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mediumurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    largeurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    alttext: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.Image}
 */
proto.life.kylestauffer.snews.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.Image;
  return proto.life.kylestauffer.snews.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.Image}
 */
proto.life.kylestauffer.snews.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmallurl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediumurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLargeurl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlttext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSmallurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMediumurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLargeurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAlttext();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.Image.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Image.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string smallUrl = 2;
 * @return {string}
 */
proto.life.kylestauffer.snews.Image.prototype.getSmallurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Image.prototype.setSmallurl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mediumUrl = 3;
 * @return {string}
 */
proto.life.kylestauffer.snews.Image.prototype.getMediumurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Image.prototype.setMediumurl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string largeUrl = 4;
 * @return {string}
 */
proto.life.kylestauffer.snews.Image.prototype.getLargeurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Image.prototype.setLargeurl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string altText = 5;
 * @return {string}
 */
proto.life.kylestauffer.snews.Image.prototype.getAlttext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Image.prototype.setAlttext = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.Author = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.Author, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.Author.displayName = 'proto.life.kylestauffer.snews.Author';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.Author.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.Author.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.Author} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.Author.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    image: (f = msg.getImage()) && proto.life.kylestauffer.snews.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.Author}
 */
proto.life.kylestauffer.snews.Author.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.Author;
  return proto.life.kylestauffer.snews.Author.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.Author} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.Author}
 */
proto.life.kylestauffer.snews.Author.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.life.kylestauffer.snews.Image;
      reader.readMessage(value,proto.life.kylestauffer.snews.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.Author.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.Author.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.Author} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.Author.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.life.kylestauffer.snews.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.Author.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Author.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.life.kylestauffer.snews.Author.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Author.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Image image = 4;
 * @return {?proto.life.kylestauffer.snews.Image}
 */
proto.life.kylestauffer.snews.Author.prototype.getImage = function() {
  return /** @type{?proto.life.kylestauffer.snews.Image} */ (
    jspb.Message.getWrapperField(this, proto.life.kylestauffer.snews.Image, 4));
};


/** @param {?proto.life.kylestauffer.snews.Image|undefined} value */
proto.life.kylestauffer.snews.Author.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.life.kylestauffer.snews.Author.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.Author.prototype.hasImage = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.Subscription.displayName = 'proto.life.kylestauffer.snews.Subscription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.Subscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    news: jspb.Message.getFieldWithDefault(msg, 2, false),
    opinion: jspb.Message.getFieldWithDefault(msg, 3, false),
    podcasts: jspb.Message.getFieldWithDefault(msg, 4, false),
    email: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.Subscription}
 */
proto.life.kylestauffer.snews.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.Subscription;
  return proto.life.kylestauffer.snews.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.Subscription}
 */
proto.life.kylestauffer.snews.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNews(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpinion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPodcasts(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNews();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOpinion();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPodcasts();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.Subscription.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Subscription.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool news = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.life.kylestauffer.snews.Subscription.prototype.getNews = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.life.kylestauffer.snews.Subscription.prototype.setNews = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool opinion = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.life.kylestauffer.snews.Subscription.prototype.getOpinion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.life.kylestauffer.snews.Subscription.prototype.setOpinion = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool podcasts = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.life.kylestauffer.snews.Subscription.prototype.getPodcasts = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.life.kylestauffer.snews.Subscription.prototype.setPodcasts = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string email = 5;
 * @return {string}
 */
proto.life.kylestauffer.snews.Subscription.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.Subscription.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetPostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetPostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetPostsRequest.displayName = 'proto.life.kylestauffer.snews.GetPostsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetPostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetPostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetPostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetPostsRequest}
 */
proto.life.kylestauffer.snews.GetPostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetPostsRequest;
  return proto.life.kylestauffer.snews.GetPostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetPostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetPostsRequest}
 */
proto.life.kylestauffer.snews.GetPostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetPostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetPostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetPostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.GetPostsRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.GetPostsRequest.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 page = 2;
 * @return {number}
 */
proto.life.kylestauffer.snews.GetPostsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.life.kylestauffer.snews.GetPostsRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetPostsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.life.kylestauffer.snews.GetPostsResponse.repeatedFields_, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetPostsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetPostsResponse.displayName = 'proto.life.kylestauffer.snews.GetPostsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.life.kylestauffer.snews.GetPostsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetPostsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetPostsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetPostsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    postList: jspb.Message.toObjectList(msg.getPostList(),
    proto.life.kylestauffer.snews.SimplePost.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetPostsResponse}
 */
proto.life.kylestauffer.snews.GetPostsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetPostsResponse;
  return proto.life.kylestauffer.snews.GetPostsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetPostsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetPostsResponse}
 */
proto.life.kylestauffer.snews.GetPostsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.life.kylestauffer.snews.SimplePost;
      reader.readMessage(value,proto.life.kylestauffer.snews.SimplePost.deserializeBinaryFromReader);
      msg.addPost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetPostsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetPostsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetPostsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.life.kylestauffer.snews.SimplePost.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimplePost post = 1;
 * @return {!Array<!proto.life.kylestauffer.snews.SimplePost>}
 */
proto.life.kylestauffer.snews.GetPostsResponse.prototype.getPostList = function() {
  return /** @type{!Array<!proto.life.kylestauffer.snews.SimplePost>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.life.kylestauffer.snews.SimplePost, 1));
};


/** @param {!Array<!proto.life.kylestauffer.snews.SimplePost>} value */
proto.life.kylestauffer.snews.GetPostsResponse.prototype.setPostList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.life.kylestauffer.snews.SimplePost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.GetPostsResponse.prototype.addPost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.life.kylestauffer.snews.SimplePost, opt_index);
};


proto.life.kylestauffer.snews.GetPostsResponse.prototype.clearPostList = function() {
  this.setPostList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetPostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetPostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetPostRequest.displayName = 'proto.life.kylestauffer.snews.GetPostRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetPostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetPostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetPostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetPostRequest}
 */
proto.life.kylestauffer.snews.GetPostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetPostRequest;
  return proto.life.kylestauffer.snews.GetPostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetPostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetPostRequest}
 */
proto.life.kylestauffer.snews.GetPostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetPostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetPostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetPostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.GetPostRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.GetPostRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetPostResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetPostResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetPostResponse.displayName = 'proto.life.kylestauffer.snews.GetPostResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetPostResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetPostResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetPostResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    post: (f = msg.getPost()) && proto.life.kylestauffer.snews.SimplePost.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetPostResponse}
 */
proto.life.kylestauffer.snews.GetPostResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetPostResponse;
  return proto.life.kylestauffer.snews.GetPostResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetPostResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetPostResponse}
 */
proto.life.kylestauffer.snews.GetPostResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.life.kylestauffer.snews.SimplePost;
      reader.readMessage(value,proto.life.kylestauffer.snews.SimplePost.deserializeBinaryFromReader);
      msg.setPost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetPostResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetPostResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetPostResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetPostResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.life.kylestauffer.snews.SimplePost.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimplePost post = 1;
 * @return {?proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.GetPostResponse.prototype.getPost = function() {
  return /** @type{?proto.life.kylestauffer.snews.SimplePost} */ (
    jspb.Message.getWrapperField(this, proto.life.kylestauffer.snews.SimplePost, 1));
};


/** @param {?proto.life.kylestauffer.snews.SimplePost|undefined} value */
proto.life.kylestauffer.snews.GetPostResponse.prototype.setPost = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.life.kylestauffer.snews.GetPostResponse.prototype.clearPost = function() {
  this.setPost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.GetPostResponse.prototype.hasPost = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetTopPostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetTopPostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetTopPostsRequest.displayName = 'proto.life.kylestauffer.snews.GetTopPostsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetTopPostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetTopPostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetTopPostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetTopPostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetTopPostsRequest}
 */
proto.life.kylestauffer.snews.GetTopPostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetTopPostsRequest;
  return proto.life.kylestauffer.snews.GetTopPostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetTopPostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetTopPostsRequest}
 */
proto.life.kylestauffer.snews.GetTopPostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetTopPostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetTopPostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetTopPostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetTopPostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.GetTopPostsRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.GetTopPostsRequest.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetTopPostsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.life.kylestauffer.snews.GetTopPostsResponse.repeatedFields_, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetTopPostsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetTopPostsResponse.displayName = 'proto.life.kylestauffer.snews.GetTopPostsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetTopPostsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetTopPostsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    postList: jspb.Message.toObjectList(msg.getPostList(),
    proto.life.kylestauffer.snews.SimplePost.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetTopPostsResponse}
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetTopPostsResponse;
  return proto.life.kylestauffer.snews.GetTopPostsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetTopPostsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetTopPostsResponse}
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.life.kylestauffer.snews.SimplePost;
      reader.readMessage(value,proto.life.kylestauffer.snews.SimplePost.deserializeBinaryFromReader);
      msg.addPost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetTopPostsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetTopPostsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.life.kylestauffer.snews.SimplePost.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimplePost post = 1;
 * @return {!Array<!proto.life.kylestauffer.snews.SimplePost>}
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.prototype.getPostList = function() {
  return /** @type{!Array<!proto.life.kylestauffer.snews.SimplePost>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.life.kylestauffer.snews.SimplePost, 1));
};


/** @param {!Array<!proto.life.kylestauffer.snews.SimplePost>} value */
proto.life.kylestauffer.snews.GetTopPostsResponse.prototype.setPostList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.life.kylestauffer.snews.SimplePost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.GetTopPostsResponse.prototype.addPost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.life.kylestauffer.snews.SimplePost, opt_index);
};


proto.life.kylestauffer.snews.GetTopPostsResponse.prototype.clearPostList = function() {
  this.setPostList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetRecentPostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetRecentPostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetRecentPostsRequest.displayName = 'proto.life.kylestauffer.snews.GetRecentPostsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetRecentPostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetRecentPostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetRecentPostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetRecentPostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetRecentPostsRequest}
 */
proto.life.kylestauffer.snews.GetRecentPostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetRecentPostsRequest;
  return proto.life.kylestauffer.snews.GetRecentPostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetRecentPostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetRecentPostsRequest}
 */
proto.life.kylestauffer.snews.GetRecentPostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetRecentPostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetRecentPostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetRecentPostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetRecentPostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.GetRecentPostsRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.GetRecentPostsRequest.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.life.kylestauffer.snews.GetRecentPostsResponse.repeatedFields_, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetRecentPostsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetRecentPostsResponse.displayName = 'proto.life.kylestauffer.snews.GetRecentPostsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetRecentPostsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetRecentPostsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    postList: jspb.Message.toObjectList(msg.getPostList(),
    proto.life.kylestauffer.snews.SimplePost.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetRecentPostsResponse}
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetRecentPostsResponse;
  return proto.life.kylestauffer.snews.GetRecentPostsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetRecentPostsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetRecentPostsResponse}
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.life.kylestauffer.snews.SimplePost;
      reader.readMessage(value,proto.life.kylestauffer.snews.SimplePost.deserializeBinaryFromReader);
      msg.addPost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetRecentPostsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetRecentPostsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.life.kylestauffer.snews.SimplePost.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimplePost post = 1;
 * @return {!Array<!proto.life.kylestauffer.snews.SimplePost>}
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.prototype.getPostList = function() {
  return /** @type{!Array<!proto.life.kylestauffer.snews.SimplePost>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.life.kylestauffer.snews.SimplePost, 1));
};


/** @param {!Array<!proto.life.kylestauffer.snews.SimplePost>} value */
proto.life.kylestauffer.snews.GetRecentPostsResponse.prototype.setPostList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.life.kylestauffer.snews.SimplePost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.GetRecentPostsResponse.prototype.addPost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.life.kylestauffer.snews.SimplePost, opt_index);
};


proto.life.kylestauffer.snews.GetRecentPostsResponse.prototype.clearPostList = function() {
  this.setPostList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetAuthorsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetAuthorsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetAuthorsRequest.displayName = 'proto.life.kylestauffer.snews.GetAuthorsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetAuthorsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetAuthorsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetAuthorsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetAuthorsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetAuthorsRequest}
 */
proto.life.kylestauffer.snews.GetAuthorsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetAuthorsRequest;
  return proto.life.kylestauffer.snews.GetAuthorsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetAuthorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetAuthorsRequest}
 */
proto.life.kylestauffer.snews.GetAuthorsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetAuthorsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetAuthorsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetAuthorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetAuthorsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.life.kylestauffer.snews.GetAuthorsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.life.kylestauffer.snews.GetAuthorsRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetAuthorsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.life.kylestauffer.snews.GetAuthorsResponse.repeatedFields_, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetAuthorsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetAuthorsResponse.displayName = 'proto.life.kylestauffer.snews.GetAuthorsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetAuthorsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetAuthorsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorsList: jspb.Message.toObjectList(msg.getAuthorsList(),
    proto.life.kylestauffer.snews.Author.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetAuthorsResponse}
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetAuthorsResponse;
  return proto.life.kylestauffer.snews.GetAuthorsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetAuthorsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetAuthorsResponse}
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.life.kylestauffer.snews.Author;
      reader.readMessage(value,proto.life.kylestauffer.snews.Author.deserializeBinaryFromReader);
      msg.addAuthors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetAuthorsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetAuthorsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.life.kylestauffer.snews.Author.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Author authors = 1;
 * @return {!Array<!proto.life.kylestauffer.snews.Author>}
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.prototype.getAuthorsList = function() {
  return /** @type{!Array<!proto.life.kylestauffer.snews.Author>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.life.kylestauffer.snews.Author, 1));
};


/** @param {!Array<!proto.life.kylestauffer.snews.Author>} value */
proto.life.kylestauffer.snews.GetAuthorsResponse.prototype.setAuthorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.life.kylestauffer.snews.Author=} opt_value
 * @param {number=} opt_index
 * @return {!proto.life.kylestauffer.snews.Author}
 */
proto.life.kylestauffer.snews.GetAuthorsResponse.prototype.addAuthors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.life.kylestauffer.snews.Author, opt_index);
};


proto.life.kylestauffer.snews.GetAuthorsResponse.prototype.clearAuthorsList = function() {
  this.setAuthorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetAuthorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetAuthorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetAuthorRequest.displayName = 'proto.life.kylestauffer.snews.GetAuthorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetAuthorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetAuthorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetAuthorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetAuthorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetAuthorRequest}
 */
proto.life.kylestauffer.snews.GetAuthorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetAuthorRequest;
  return proto.life.kylestauffer.snews.GetAuthorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetAuthorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetAuthorRequest}
 */
proto.life.kylestauffer.snews.GetAuthorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetAuthorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetAuthorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetAuthorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetAuthorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.GetAuthorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.GetAuthorRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetAuthorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.life.kylestauffer.snews.GetAuthorResponse.repeatedFields_, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetAuthorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetAuthorResponse.displayName = 'proto.life.kylestauffer.snews.GetAuthorResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.life.kylestauffer.snews.GetAuthorResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetAuthorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetAuthorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetAuthorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetAuthorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    author: (f = msg.getAuthor()) && proto.life.kylestauffer.snews.Author.toObject(includeInstance, f),
    postsList: jspb.Message.toObjectList(msg.getPostsList(),
    proto.life.kylestauffer.snews.SimplePost.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetAuthorResponse}
 */
proto.life.kylestauffer.snews.GetAuthorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetAuthorResponse;
  return proto.life.kylestauffer.snews.GetAuthorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetAuthorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetAuthorResponse}
 */
proto.life.kylestauffer.snews.GetAuthorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.life.kylestauffer.snews.Author;
      reader.readMessage(value,proto.life.kylestauffer.snews.Author.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 2:
      var value = new proto.life.kylestauffer.snews.SimplePost;
      reader.readMessage(value,proto.life.kylestauffer.snews.SimplePost.deserializeBinaryFromReader);
      msg.addPosts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetAuthorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetAuthorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetAuthorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetAuthorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.life.kylestauffer.snews.Author.serializeBinaryToWriter
    );
  }
  f = message.getPostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.life.kylestauffer.snews.SimplePost.serializeBinaryToWriter
    );
  }
};


/**
 * optional Author author = 1;
 * @return {?proto.life.kylestauffer.snews.Author}
 */
proto.life.kylestauffer.snews.GetAuthorResponse.prototype.getAuthor = function() {
  return /** @type{?proto.life.kylestauffer.snews.Author} */ (
    jspb.Message.getWrapperField(this, proto.life.kylestauffer.snews.Author, 1));
};


/** @param {?proto.life.kylestauffer.snews.Author|undefined} value */
proto.life.kylestauffer.snews.GetAuthorResponse.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.life.kylestauffer.snews.GetAuthorResponse.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.GetAuthorResponse.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SimplePost posts = 2;
 * @return {!Array<!proto.life.kylestauffer.snews.SimplePost>}
 */
proto.life.kylestauffer.snews.GetAuthorResponse.prototype.getPostsList = function() {
  return /** @type{!Array<!proto.life.kylestauffer.snews.SimplePost>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.life.kylestauffer.snews.SimplePost, 2));
};


/** @param {!Array<!proto.life.kylestauffer.snews.SimplePost>} value */
proto.life.kylestauffer.snews.GetAuthorResponse.prototype.setPostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.life.kylestauffer.snews.SimplePost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.life.kylestauffer.snews.SimplePost}
 */
proto.life.kylestauffer.snews.GetAuthorResponse.prototype.addPosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.life.kylestauffer.snews.SimplePost, opt_index);
};


proto.life.kylestauffer.snews.GetAuthorResponse.prototype.clearPostsList = function() {
  this.setPostsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.SubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.SubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.SubscriptionRequest.displayName = 'proto.life.kylestauffer.snews.SubscriptionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.SubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.SubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.SubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscription: (f = msg.getSubscription()) && proto.life.kylestauffer.snews.Subscription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.SubscriptionRequest}
 */
proto.life.kylestauffer.snews.SubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.SubscriptionRequest;
  return proto.life.kylestauffer.snews.SubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.SubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.SubscriptionRequest}
 */
proto.life.kylestauffer.snews.SubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.life.kylestauffer.snews.Subscription;
      reader.readMessage(value,proto.life.kylestauffer.snews.Subscription.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.SubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.SubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.SubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.life.kylestauffer.snews.Subscription.serializeBinaryToWriter
    );
  }
};


/**
 * optional Subscription subscription = 1;
 * @return {?proto.life.kylestauffer.snews.Subscription}
 */
proto.life.kylestauffer.snews.SubscriptionRequest.prototype.getSubscription = function() {
  return /** @type{?proto.life.kylestauffer.snews.Subscription} */ (
    jspb.Message.getWrapperField(this, proto.life.kylestauffer.snews.Subscription, 1));
};


/** @param {?proto.life.kylestauffer.snews.Subscription|undefined} value */
proto.life.kylestauffer.snews.SubscriptionRequest.prototype.setSubscription = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.life.kylestauffer.snews.SubscriptionRequest.prototype.clearSubscription = function() {
  this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.SubscriptionRequest.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.GetSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.GetSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.GetSubscriptionRequest.displayName = 'proto.life.kylestauffer.snews.GetSubscriptionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.GetSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.GetSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.GetSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.GetSubscriptionRequest}
 */
proto.life.kylestauffer.snews.GetSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.GetSubscriptionRequest;
  return proto.life.kylestauffer.snews.GetSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.GetSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.GetSubscriptionRequest}
 */
proto.life.kylestauffer.snews.GetSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.GetSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.GetSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.GetSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.GetSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.GetSubscriptionRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.GetSubscriptionRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.SubscriptionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.SubscriptionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.SubscriptionResponse.displayName = 'proto.life.kylestauffer.snews.SubscriptionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.SubscriptionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.SubscriptionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.SubscriptionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SubscriptionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscription: (f = msg.getSubscription()) && proto.life.kylestauffer.snews.Subscription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.SubscriptionResponse}
 */
proto.life.kylestauffer.snews.SubscriptionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.SubscriptionResponse;
  return proto.life.kylestauffer.snews.SubscriptionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.SubscriptionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.SubscriptionResponse}
 */
proto.life.kylestauffer.snews.SubscriptionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.life.kylestauffer.snews.Subscription;
      reader.readMessage(value,proto.life.kylestauffer.snews.Subscription.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.SubscriptionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.SubscriptionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.SubscriptionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.SubscriptionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.life.kylestauffer.snews.Subscription.serializeBinaryToWriter
    );
  }
};


/**
 * optional Subscription subscription = 1;
 * @return {?proto.life.kylestauffer.snews.Subscription}
 */
proto.life.kylestauffer.snews.SubscriptionResponse.prototype.getSubscription = function() {
  return /** @type{?proto.life.kylestauffer.snews.Subscription} */ (
    jspb.Message.getWrapperField(this, proto.life.kylestauffer.snews.Subscription, 1));
};


/** @param {?proto.life.kylestauffer.snews.Subscription|undefined} value */
proto.life.kylestauffer.snews.SubscriptionResponse.prototype.setSubscription = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.life.kylestauffer.snews.SubscriptionResponse.prototype.clearSubscription = function() {
  this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.SubscriptionResponse.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.LoginRequest.displayName = 'proto.life.kylestauffer.snews.LoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.LoginRequest}
 */
proto.life.kylestauffer.snews.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.LoginRequest;
  return proto.life.kylestauffer.snews.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.LoginRequest}
 */
proto.life.kylestauffer.snews.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.LoginRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.LoginRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.life.kylestauffer.snews.LoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.LoginRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.LoginResponse.displayName = 'proto.life.kylestauffer.snews.LoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.LoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.LoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.LoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiration: (f = msg.getExpiration()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    role: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.LoginResponse}
 */
proto.life.kylestauffer.snews.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.LoginResponse;
  return proto.life.kylestauffer.snews.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.LoginResponse}
 */
proto.life.kylestauffer.snews.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 3:
      var value = /** @type {!proto.life.kylestauffer.snews.UserRole} */ (reader.readEnum());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.LoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.LoginResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.LoginResponse.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp expiration = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.life.kylestauffer.snews.LoginResponse.prototype.getExpiration = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.life.kylestauffer.snews.LoginResponse.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.life.kylestauffer.snews.LoginResponse.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.life.kylestauffer.snews.LoginResponse.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UserRole role = 3;
 * @return {!proto.life.kylestauffer.snews.UserRole}
 */
proto.life.kylestauffer.snews.LoginResponse.prototype.getRole = function() {
  return /** @type {!proto.life.kylestauffer.snews.UserRole} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.life.kylestauffer.snews.UserRole} value */
proto.life.kylestauffer.snews.LoginResponse.prototype.setRole = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.RegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.RegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.RegistrationRequest.displayName = 'proto.life.kylestauffer.snews.RegistrationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.RegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.RegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.RegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.RegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.RegistrationRequest}
 */
proto.life.kylestauffer.snews.RegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.RegistrationRequest;
  return proto.life.kylestauffer.snews.RegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.RegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.RegistrationRequest}
 */
proto.life.kylestauffer.snews.RegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.RegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.RegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.RegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.RegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.RegistrationRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.RegistrationRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.life.kylestauffer.snews.RegistrationRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.RegistrationRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.TokenValidationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.TokenValidationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.TokenValidationRequest.displayName = 'proto.life.kylestauffer.snews.TokenValidationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.TokenValidationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.TokenValidationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.TokenValidationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.TokenValidationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.TokenValidationRequest}
 */
proto.life.kylestauffer.snews.TokenValidationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.TokenValidationRequest;
  return proto.life.kylestauffer.snews.TokenValidationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.TokenValidationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.TokenValidationRequest}
 */
proto.life.kylestauffer.snews.TokenValidationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.TokenValidationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.TokenValidationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.TokenValidationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.TokenValidationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.life.kylestauffer.snews.TokenValidationRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.life.kylestauffer.snews.TokenValidationRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.life.kylestauffer.snews.TokenValidationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.life.kylestauffer.snews.TokenValidationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.life.kylestauffer.snews.TokenValidationResponse.displayName = 'proto.life.kylestauffer.snews.TokenValidationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.life.kylestauffer.snews.TokenValidationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.life.kylestauffer.snews.TokenValidationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.life.kylestauffer.snews.TokenValidationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.TokenValidationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    valid: jspb.Message.getFieldWithDefault(msg, 1, false),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.life.kylestauffer.snews.TokenValidationResponse}
 */
proto.life.kylestauffer.snews.TokenValidationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.life.kylestauffer.snews.TokenValidationResponse;
  return proto.life.kylestauffer.snews.TokenValidationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.life.kylestauffer.snews.TokenValidationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.life.kylestauffer.snews.TokenValidationResponse}
 */
proto.life.kylestauffer.snews.TokenValidationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    case 2:
      var value = /** @type {!proto.life.kylestauffer.snews.UserRole} */ (reader.readEnum());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.life.kylestauffer.snews.TokenValidationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.life.kylestauffer.snews.TokenValidationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.life.kylestauffer.snews.TokenValidationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.life.kylestauffer.snews.TokenValidationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bool valid = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.life.kylestauffer.snews.TokenValidationResponse.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.life.kylestauffer.snews.TokenValidationResponse.prototype.setValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional UserRole role = 2;
 * @return {!proto.life.kylestauffer.snews.UserRole}
 */
proto.life.kylestauffer.snews.TokenValidationResponse.prototype.getRole = function() {
  return /** @type {!proto.life.kylestauffer.snews.UserRole} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.life.kylestauffer.snews.UserRole} value */
proto.life.kylestauffer.snews.TokenValidationResponse.prototype.setRole = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.life.kylestauffer.snews.PostType = {
  HOME: 0,
  NEWS: 1,
  OPINION: 2,
  FEATURES: 3,
  LISTEN: 4,
  WATCH: 5,
  AUTHORS: 6,
  ANALYTICS: 7
};

/**
 * @enum {number}
 */
proto.life.kylestauffer.snews.UserRole = {
  ANONYMOUS: 0,
  READER: 1,
  AUTHOR: 2,
  EDITOR: 3,
  ADMIN: 4,
  SUPERADMIN: 5
};

goog.object.extend(exports, proto.life.kylestauffer.snews);
